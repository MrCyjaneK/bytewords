// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Blockchain Commons bc-bytewords bindings
class BytewordsBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BytewordsBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BytewordsBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> bytewords_encode(
    int style,
    ffi.Pointer<ffi.Uint8> in_buf,
    int in_len,
  ) {
    return _bytewords_encode(
      style,
      in_buf,
      in_len,
    );
  }

  late final _bytewords_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int32, ffi.Pointer<ffi.Uint8>,
              ffi.Size)>>('bytewords_encode');
  late final _bytewords_encode = _bytewords_encodePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  bool bytewords_decode(
    int style,
    ffi.Pointer<ffi.Char> in_string,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> out_buf,
    ffi.Pointer<ffi.Size> out_len,
  ) {
    return _bytewords_decode(
      style,
      in_string,
      out_buf,
      out_len,
    );
  }

  late final _bytewords_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Size>)>>('bytewords_decode');
  late final _bytewords_decode = _bytewords_decodePtr.asFunction<
      bool Function(int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>, ffi.Pointer<ffi.Size>)>();

  void bytewords_get_word(
    int index,
    ffi.Pointer<ffi.Char> word,
  ) {
    return _bytewords_get_word(
      index,
      word,
    );
  }

  late final _bytewords_get_wordPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Uint8, ffi.Pointer<ffi.Char>)>>(
      'bytewords_get_word');
  late final _bytewords_get_word = _bytewords_get_wordPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();
}

abstract class bw_style_e {
  static const int bw_standard = 0;
  static const int bw_uri = 1;
  static const int bw_minimal = 2;
}
